#!/usr/bin/env ruby

require 'ideeli_spinup'
require 'logger'
require 'pp'
require 'yaml'
require 'optparse'
require 'rubygems'
require 'fog'


logger = Logger.new $stdout
logger.level = Logger::DEBUG

config = YAML.load_file('config/ideeli_spinup.yaml')
options = { :account           => nil,
            :region            => 'us-east-1',
            :availability_zone => nil,
            :image             => 'lucid64',
            :instance_type     => nil,
            :subnet            => 'vpc1_public',
            :security_group    => 'default',
            :logger            => logger }

hostnames = %w[dam1.testing.ideeli.com dam3.testing.ideeli.com]

env = IdeeliSpinup::Environment.new(config, options)

classifier = IdeeliSpinup::Classifier.get( IdeeliSpinup::Classifier::IClassify,
                                           :url      => config[:classifier][:url],
                                           :username => config[:classifier][:username],
                                           :password => config[:classifier][:password] )


logger.debug sprintf( "Available zones %s", env.availability_zones.join(', '))
logger.debug sprintf( "Using AMI %s", env.image_from_name(options[:image]) )
logger.debug sprintf( "default account: %s", env.default_account_name)
logger.debug sprintf( "Subnet: %s", env.subnet)

exit_code = 0
hostnames.each do |hostname|
  hostname_exists = classifier.exists?(hostname)
  if hostname_exists 
    logger.error sprintf("Node %s exists in node classifier and not purged", hostname)
    exit_code += 1
    next
  end
  s = IdeeliSpinup::Server.new(hostname, env, :logger => logger )
  pp s.spinup
  logger.debug sprintf("Hostname: %s, AZ: %s, Subnet: %s", s.hostname, s.availability_zone, s.subnet)
end 

exit exit_code
